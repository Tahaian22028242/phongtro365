generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String
  avatar   String?
  phone    String?
  zalo     String?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  places   Place[]   @relation("UserPlaces") // Khi xóa User, xóa Place liên quan
  bookings Booking[] @relation("UserBookings") // Khi xóa User, xóa Booking liên quan
}

model Place {
  id          Int          @id @default(autoincrement())
  owner       User         @relation("UserPlaces", fields: [ownerId], references: [id], onDelete: Cascade) // Khi xóa User, xóa Place
  ownerId     Int
  title       String
  address     String
  latitude    Decimal?
  longitude   Decimal?
  area        Int // diện tích
  photos      PlacePhoto[] @relation("PlacePhotos") // Khi xóa Place, xóa Photo liên quan
  description String
  perks       PlacePerk[]  @relation("PlacePerks") // Khi xóa Place, xóa Perk liên quan
  extraInfo   String
  duration    Int // thời hạn hợp đồng
  price       Int
  bookings    Booking[]    @relation("PlaceBookings") // Khi xóa Place, xóa Booking liên quan
}

model PlacePhoto {
  id      Int    @id @default(autoincrement())
  url     String
  place   Place  @relation("PlacePhotos", fields: [placeId], references: [id], onDelete: Cascade) // Khi xóa Place, xóa Photo liên quan
  placeId Int
}

model PlacePerk {
  id      String @id @default(uuid())
  perk    String
  place   Place  @relation("PlacePerks", fields: [placeId], references: [id], onDelete: Cascade) // Khi xóa Place, xóa Perk liên quan
  placeId Int
}

model Booking {
  id         Int           @id @default(autoincrement())
  place      Place         @relation("PlaceBookings", fields: [placeId], references: [id], onDelete: Cascade) // Khi xóa Place, xóa Booking
  placeId    Int
  renter     User          @relation("UserBookings", fields: [renterId], references: [id], onDelete: Cascade) // Khi xóa User, xóa Booking
  renterId   Int
  checkOut   DateTime?
  status     BookingStatus @default(PENDING)
  isContinue Boolean       @default(false)
  invoices   Invoice[]     @relation("BookingInvoices") // Khi xóa Booking, xóa Invoice liên quan
  createAt   DateTime      @default(now())
  updateAt   DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  APPROVED
  WAIT
  RENTED
}

model Invoice {
  id          Int            @id @default(autoincrement())
  booking     Booking        @relation("BookingInvoices", fields: [bookingId], references: [id], onDelete: Cascade) // Khi xóa Booking, xóa Invoice
  bookingId   Int
  title       String
  description String?
  photos      InvoicePhoto[] @relation("InvoicePhotos") // Khi xóa Invoice, xóa Photo liên quan
  createdAt   DateTime       @default(now())
  updateAt    DateTime       @updatedAt
}

model InvoicePhoto {
  id        Int     @id @default(autoincrement())
  url       String
  invoice   Invoice @relation("InvoicePhotos", fields: [invoiceId], references: [id], onDelete: Cascade) // Khi xóa Invoice, xóa Photo liên quan
  invoiceId Int
}
