
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Place
 * 
 */
export type Place = $Result.DefaultSelection<Prisma.$PlacePayload>
/**
 * Model PlacePhoto
 * 
 */
export type PlacePhoto = $Result.DefaultSelection<Prisma.$PlacePhotoPayload>
/**
 * Model PlacePerk
 * 
 */
export type PlacePerk = $Result.DefaultSelection<Prisma.$PlacePerkPayload>
/**
 * Model Booking
 * 
 */
export type Booking = $Result.DefaultSelection<Prisma.$BookingPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.place`: Exposes CRUD operations for the **Place** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Places
    * const places = await prisma.place.findMany()
    * ```
    */
  get place(): Prisma.PlaceDelegate<ExtArgs>;

  /**
   * `prisma.placePhoto`: Exposes CRUD operations for the **PlacePhoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlacePhotos
    * const placePhotos = await prisma.placePhoto.findMany()
    * ```
    */
  get placePhoto(): Prisma.PlacePhotoDelegate<ExtArgs>;

  /**
   * `prisma.placePerk`: Exposes CRUD operations for the **PlacePerk** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlacePerks
    * const placePerks = await prisma.placePerk.findMany()
    * ```
    */
  get placePerk(): Prisma.PlacePerkDelegate<ExtArgs>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Place: 'Place',
    PlacePhoto: 'PlacePhoto',
    PlacePerk: 'PlacePerk',
    Booking: 'Booking'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "place" | "placePhoto" | "placePerk" | "booking"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Place: {
        payload: Prisma.$PlacePayload<ExtArgs>
        fields: Prisma.PlaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          findFirst: {
            args: Prisma.PlaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          findMany: {
            args: Prisma.PlaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>[]
          }
          create: {
            args: Prisma.PlaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          createMany: {
            args: Prisma.PlaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          update: {
            args: Prisma.PlaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          deleteMany: {
            args: Prisma.PlaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          aggregate: {
            args: Prisma.PlaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlace>
          }
          groupBy: {
            args: Prisma.PlaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaceCountArgs<ExtArgs>
            result: $Utils.Optional<PlaceCountAggregateOutputType> | number
          }
        }
      }
      PlacePhoto: {
        payload: Prisma.$PlacePhotoPayload<ExtArgs>
        fields: Prisma.PlacePhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlacePhotoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlacePhotoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePhotoPayload>
          }
          findFirst: {
            args: Prisma.PlacePhotoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlacePhotoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePhotoPayload>
          }
          findMany: {
            args: Prisma.PlacePhotoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePhotoPayload>[]
          }
          create: {
            args: Prisma.PlacePhotoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePhotoPayload>
          }
          createMany: {
            args: Prisma.PlacePhotoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlacePhotoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePhotoPayload>
          }
          update: {
            args: Prisma.PlacePhotoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePhotoPayload>
          }
          deleteMany: {
            args: Prisma.PlacePhotoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlacePhotoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlacePhotoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePhotoPayload>
          }
          aggregate: {
            args: Prisma.PlacePhotoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlacePhoto>
          }
          groupBy: {
            args: Prisma.PlacePhotoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlacePhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlacePhotoCountArgs<ExtArgs>
            result: $Utils.Optional<PlacePhotoCountAggregateOutputType> | number
          }
        }
      }
      PlacePerk: {
        payload: Prisma.$PlacePerkPayload<ExtArgs>
        fields: Prisma.PlacePerkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlacePerkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePerkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlacePerkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePerkPayload>
          }
          findFirst: {
            args: Prisma.PlacePerkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePerkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlacePerkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePerkPayload>
          }
          findMany: {
            args: Prisma.PlacePerkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePerkPayload>[]
          }
          create: {
            args: Prisma.PlacePerkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePerkPayload>
          }
          createMany: {
            args: Prisma.PlacePerkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlacePerkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePerkPayload>
          }
          update: {
            args: Prisma.PlacePerkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePerkPayload>
          }
          deleteMany: {
            args: Prisma.PlacePerkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlacePerkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlacePerkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePerkPayload>
          }
          aggregate: {
            args: Prisma.PlacePerkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlacePerk>
          }
          groupBy: {
            args: Prisma.PlacePerkGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlacePerkGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlacePerkCountArgs<ExtArgs>
            result: $Utils.Optional<PlacePerkCountAggregateOutputType> | number
          }
        }
      }
      Booking: {
        payload: Prisma.$BookingPayload<ExtArgs>
        fields: Prisma.BookingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findFirst: {
            args: Prisma.BookingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findMany: {
            args: Prisma.BookingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          create: {
            args: Prisma.BookingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          createMany: {
            args: Prisma.BookingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          update: {
            args: Prisma.BookingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          deleteMany: {
            args: Prisma.BookingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          aggregate: {
            args: Prisma.BookingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBooking>
          }
          groupBy: {
            args: Prisma.BookingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingCountArgs<ExtArgs>
            result: $Utils.Optional<BookingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    places: number
    bookings: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    places?: boolean | UserCountOutputTypeCountPlacesArgs
    bookings?: boolean | UserCountOutputTypeCountBookingsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlacesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }


  /**
   * Count Type PlaceCountOutputType
   */

  export type PlaceCountOutputType = {
    photos: number
    perks: number
    bookings: number
  }

  export type PlaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photos?: boolean | PlaceCountOutputTypeCountPhotosArgs
    perks?: boolean | PlaceCountOutputTypeCountPerksArgs
    bookings?: boolean | PlaceCountOutputTypeCountBookingsArgs
  }

  // Custom InputTypes
  /**
   * PlaceCountOutputType without action
   */
  export type PlaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceCountOutputType
     */
    select?: PlaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlaceCountOutputType without action
   */
  export type PlaceCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlacePhotoWhereInput
  }

  /**
   * PlaceCountOutputType without action
   */
  export type PlaceCountOutputTypeCountPerksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlacePerkWhereInput
  }

  /**
   * PlaceCountOutputType without action
   */
  export type PlaceCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createAt?: true
    updateAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createAt?: true
    updateAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    createAt: Date
    updateAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createAt?: boolean
    updateAt?: boolean
    places?: boolean | User$placesArgs<ExtArgs>
    bookings?: boolean | User$bookingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    places?: boolean | User$placesArgs<ExtArgs>
    bookings?: boolean | User$bookingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      places: Prisma.$PlacePayload<ExtArgs>[]
      bookings: Prisma.$BookingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    places<T extends User$placesArgs<ExtArgs> = {}>(args?: Subset<T, User$placesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findMany"> | Null>
    bookings<T extends User$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, User$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createAt: FieldRef<"User", 'DateTime'>
    readonly updateAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.places
   */
  export type User$placesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    where?: PlaceWhereInput
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    cursor?: PlaceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * User.bookings
   */
  export type User$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Place
   */

  export type AggregatePlace = {
    _count: PlaceCountAggregateOutputType | null
    _avg: PlaceAvgAggregateOutputType | null
    _sum: PlaceSumAggregateOutputType | null
    _min: PlaceMinAggregateOutputType | null
    _max: PlaceMaxAggregateOutputType | null
  }

  export type PlaceAvgAggregateOutputType = {
    maxGuests: number | null
    price: number | null
  }

  export type PlaceSumAggregateOutputType = {
    maxGuests: number | null
    price: number | null
  }

  export type PlaceMinAggregateOutputType = {
    id: string | null
    ownerId: string | null
    title: string | null
    address: string | null
    description: string | null
    extraInfo: string | null
    checkIn: string | null
    checkOut: string | null
    maxGuests: number | null
    price: number | null
  }

  export type PlaceMaxAggregateOutputType = {
    id: string | null
    ownerId: string | null
    title: string | null
    address: string | null
    description: string | null
    extraInfo: string | null
    checkIn: string | null
    checkOut: string | null
    maxGuests: number | null
    price: number | null
  }

  export type PlaceCountAggregateOutputType = {
    id: number
    ownerId: number
    title: number
    address: number
    description: number
    extraInfo: number
    checkIn: number
    checkOut: number
    maxGuests: number
    price: number
    _all: number
  }


  export type PlaceAvgAggregateInputType = {
    maxGuests?: true
    price?: true
  }

  export type PlaceSumAggregateInputType = {
    maxGuests?: true
    price?: true
  }

  export type PlaceMinAggregateInputType = {
    id?: true
    ownerId?: true
    title?: true
    address?: true
    description?: true
    extraInfo?: true
    checkIn?: true
    checkOut?: true
    maxGuests?: true
    price?: true
  }

  export type PlaceMaxAggregateInputType = {
    id?: true
    ownerId?: true
    title?: true
    address?: true
    description?: true
    extraInfo?: true
    checkIn?: true
    checkOut?: true
    maxGuests?: true
    price?: true
  }

  export type PlaceCountAggregateInputType = {
    id?: true
    ownerId?: true
    title?: true
    address?: true
    description?: true
    extraInfo?: true
    checkIn?: true
    checkOut?: true
    maxGuests?: true
    price?: true
    _all?: true
  }

  export type PlaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Place to aggregate.
     */
    where?: PlaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Places
    **/
    _count?: true | PlaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaceMaxAggregateInputType
  }

  export type GetPlaceAggregateType<T extends PlaceAggregateArgs> = {
        [P in keyof T & keyof AggregatePlace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlace[P]>
      : GetScalarType<T[P], AggregatePlace[P]>
  }




  export type PlaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaceWhereInput
    orderBy?: PlaceOrderByWithAggregationInput | PlaceOrderByWithAggregationInput[]
    by: PlaceScalarFieldEnum[] | PlaceScalarFieldEnum
    having?: PlaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaceCountAggregateInputType | true
    _avg?: PlaceAvgAggregateInputType
    _sum?: PlaceSumAggregateInputType
    _min?: PlaceMinAggregateInputType
    _max?: PlaceMaxAggregateInputType
  }

  export type PlaceGroupByOutputType = {
    id: string
    ownerId: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    _count: PlaceCountAggregateOutputType | null
    _avg: PlaceAvgAggregateOutputType | null
    _sum: PlaceSumAggregateOutputType | null
    _min: PlaceMinAggregateOutputType | null
    _max: PlaceMaxAggregateOutputType | null
  }

  type GetPlaceGroupByPayload<T extends PlaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaceGroupByOutputType[P]>
            : GetScalarType<T[P], PlaceGroupByOutputType[P]>
        }
      >
    >


  export type PlaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    title?: boolean
    address?: boolean
    description?: boolean
    extraInfo?: boolean
    checkIn?: boolean
    checkOut?: boolean
    maxGuests?: boolean
    price?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    photos?: boolean | Place$photosArgs<ExtArgs>
    perks?: boolean | Place$perksArgs<ExtArgs>
    bookings?: boolean | Place$bookingsArgs<ExtArgs>
    _count?: boolean | PlaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["place"]>


  export type PlaceSelectScalar = {
    id?: boolean
    ownerId?: boolean
    title?: boolean
    address?: boolean
    description?: boolean
    extraInfo?: boolean
    checkIn?: boolean
    checkOut?: boolean
    maxGuests?: boolean
    price?: boolean
  }

  export type PlaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    photos?: boolean | Place$photosArgs<ExtArgs>
    perks?: boolean | Place$perksArgs<ExtArgs>
    bookings?: boolean | Place$bookingsArgs<ExtArgs>
    _count?: boolean | PlaceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PlacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Place"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      photos: Prisma.$PlacePhotoPayload<ExtArgs>[]
      perks: Prisma.$PlacePerkPayload<ExtArgs>[]
      bookings: Prisma.$BookingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ownerId: string
      title: string
      address: string
      description: string
      extraInfo: string
      checkIn: string
      checkOut: string
      maxGuests: number
      price: number
    }, ExtArgs["result"]["place"]>
    composites: {}
  }

  type PlaceGetPayload<S extends boolean | null | undefined | PlaceDefaultArgs> = $Result.GetResult<Prisma.$PlacePayload, S>

  type PlaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlaceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlaceCountAggregateInputType | true
    }

  export interface PlaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Place'], meta: { name: 'Place' } }
    /**
     * Find zero or one Place that matches the filter.
     * @param {PlaceFindUniqueArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlaceFindUniqueArgs>(args: SelectSubset<T, PlaceFindUniqueArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Place that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlaceFindUniqueOrThrowArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlaceFindUniqueOrThrowArgs>(args: SelectSubset<T, PlaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Place that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceFindFirstArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlaceFindFirstArgs>(args?: SelectSubset<T, PlaceFindFirstArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Place that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceFindFirstOrThrowArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlaceFindFirstOrThrowArgs>(args?: SelectSubset<T, PlaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Places that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Places
     * const places = await prisma.place.findMany()
     * 
     * // Get first 10 Places
     * const places = await prisma.place.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const placeWithIdOnly = await prisma.place.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlaceFindManyArgs>(args?: SelectSubset<T, PlaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Place.
     * @param {PlaceCreateArgs} args - Arguments to create a Place.
     * @example
     * // Create one Place
     * const Place = await prisma.place.create({
     *   data: {
     *     // ... data to create a Place
     *   }
     * })
     * 
     */
    create<T extends PlaceCreateArgs>(args: SelectSubset<T, PlaceCreateArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Places.
     * @param {PlaceCreateManyArgs} args - Arguments to create many Places.
     * @example
     * // Create many Places
     * const place = await prisma.place.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlaceCreateManyArgs>(args?: SelectSubset<T, PlaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Place.
     * @param {PlaceDeleteArgs} args - Arguments to delete one Place.
     * @example
     * // Delete one Place
     * const Place = await prisma.place.delete({
     *   where: {
     *     // ... filter to delete one Place
     *   }
     * })
     * 
     */
    delete<T extends PlaceDeleteArgs>(args: SelectSubset<T, PlaceDeleteArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Place.
     * @param {PlaceUpdateArgs} args - Arguments to update one Place.
     * @example
     * // Update one Place
     * const place = await prisma.place.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlaceUpdateArgs>(args: SelectSubset<T, PlaceUpdateArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Places.
     * @param {PlaceDeleteManyArgs} args - Arguments to filter Places to delete.
     * @example
     * // Delete a few Places
     * const { count } = await prisma.place.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlaceDeleteManyArgs>(args?: SelectSubset<T, PlaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Places
     * const place = await prisma.place.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlaceUpdateManyArgs>(args: SelectSubset<T, PlaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Place.
     * @param {PlaceUpsertArgs} args - Arguments to update or create a Place.
     * @example
     * // Update or create a Place
     * const place = await prisma.place.upsert({
     *   create: {
     *     // ... data to create a Place
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Place we want to update
     *   }
     * })
     */
    upsert<T extends PlaceUpsertArgs>(args: SelectSubset<T, PlaceUpsertArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceCountArgs} args - Arguments to filter Places to count.
     * @example
     * // Count the number of Places
     * const count = await prisma.place.count({
     *   where: {
     *     // ... the filter for the Places we want to count
     *   }
     * })
    **/
    count<T extends PlaceCountArgs>(
      args?: Subset<T, PlaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Place.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaceAggregateArgs>(args: Subset<T, PlaceAggregateArgs>): Prisma.PrismaPromise<GetPlaceAggregateType<T>>

    /**
     * Group by Place.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaceGroupByArgs['orderBy'] }
        : { orderBy?: PlaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Place model
   */
  readonly fields: PlaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Place.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    photos<T extends Place$photosArgs<ExtArgs> = {}>(args?: Subset<T, Place$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "findMany"> | Null>
    perks<T extends Place$perksArgs<ExtArgs> = {}>(args?: Subset<T, Place$perksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "findMany"> | Null>
    bookings<T extends Place$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, Place$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Place model
   */ 
  interface PlaceFieldRefs {
    readonly id: FieldRef<"Place", 'String'>
    readonly ownerId: FieldRef<"Place", 'String'>
    readonly title: FieldRef<"Place", 'String'>
    readonly address: FieldRef<"Place", 'String'>
    readonly description: FieldRef<"Place", 'String'>
    readonly extraInfo: FieldRef<"Place", 'String'>
    readonly checkIn: FieldRef<"Place", 'String'>
    readonly checkOut: FieldRef<"Place", 'String'>
    readonly maxGuests: FieldRef<"Place", 'Int'>
    readonly price: FieldRef<"Place", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Place findUnique
   */
  export type PlaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Place to fetch.
     */
    where: PlaceWhereUniqueInput
  }

  /**
   * Place findUniqueOrThrow
   */
  export type PlaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Place to fetch.
     */
    where: PlaceWhereUniqueInput
  }

  /**
   * Place findFirst
   */
  export type PlaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Place to fetch.
     */
    where?: PlaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Places.
     */
    cursor?: PlaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Places.
     */
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * Place findFirstOrThrow
   */
  export type PlaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Place to fetch.
     */
    where?: PlaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Places.
     */
    cursor?: PlaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Places.
     */
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * Place findMany
   */
  export type PlaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Places to fetch.
     */
    where?: PlaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Places.
     */
    cursor?: PlaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * Place create
   */
  export type PlaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * The data needed to create a Place.
     */
    data: XOR<PlaceCreateInput, PlaceUncheckedCreateInput>
  }

  /**
   * Place createMany
   */
  export type PlaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Places.
     */
    data: PlaceCreateManyInput | PlaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Place update
   */
  export type PlaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * The data needed to update a Place.
     */
    data: XOR<PlaceUpdateInput, PlaceUncheckedUpdateInput>
    /**
     * Choose, which Place to update.
     */
    where: PlaceWhereUniqueInput
  }

  /**
   * Place updateMany
   */
  export type PlaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Places.
     */
    data: XOR<PlaceUpdateManyMutationInput, PlaceUncheckedUpdateManyInput>
    /**
     * Filter which Places to update
     */
    where?: PlaceWhereInput
  }

  /**
   * Place upsert
   */
  export type PlaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * The filter to search for the Place to update in case it exists.
     */
    where: PlaceWhereUniqueInput
    /**
     * In case the Place found by the `where` argument doesn't exist, create a new Place with this data.
     */
    create: XOR<PlaceCreateInput, PlaceUncheckedCreateInput>
    /**
     * In case the Place was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaceUpdateInput, PlaceUncheckedUpdateInput>
  }

  /**
   * Place delete
   */
  export type PlaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter which Place to delete.
     */
    where: PlaceWhereUniqueInput
  }

  /**
   * Place deleteMany
   */
  export type PlaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Places to delete
     */
    where?: PlaceWhereInput
  }

  /**
   * Place.photos
   */
  export type Place$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    where?: PlacePhotoWhereInput
    orderBy?: PlacePhotoOrderByWithRelationInput | PlacePhotoOrderByWithRelationInput[]
    cursor?: PlacePhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlacePhotoScalarFieldEnum | PlacePhotoScalarFieldEnum[]
  }

  /**
   * Place.perks
   */
  export type Place$perksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    where?: PlacePerkWhereInput
    orderBy?: PlacePerkOrderByWithRelationInput | PlacePerkOrderByWithRelationInput[]
    cursor?: PlacePerkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlacePerkScalarFieldEnum | PlacePerkScalarFieldEnum[]
  }

  /**
   * Place.bookings
   */
  export type Place$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Place without action
   */
  export type PlaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
  }


  /**
   * Model PlacePhoto
   */

  export type AggregatePlacePhoto = {
    _count: PlacePhotoCountAggregateOutputType | null
    _min: PlacePhotoMinAggregateOutputType | null
    _max: PlacePhotoMaxAggregateOutputType | null
  }

  export type PlacePhotoMinAggregateOutputType = {
    id: string | null
    url: string | null
    placeId: string | null
  }

  export type PlacePhotoMaxAggregateOutputType = {
    id: string | null
    url: string | null
    placeId: string | null
  }

  export type PlacePhotoCountAggregateOutputType = {
    id: number
    url: number
    placeId: number
    _all: number
  }


  export type PlacePhotoMinAggregateInputType = {
    id?: true
    url?: true
    placeId?: true
  }

  export type PlacePhotoMaxAggregateInputType = {
    id?: true
    url?: true
    placeId?: true
  }

  export type PlacePhotoCountAggregateInputType = {
    id?: true
    url?: true
    placeId?: true
    _all?: true
  }

  export type PlacePhotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlacePhoto to aggregate.
     */
    where?: PlacePhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlacePhotos to fetch.
     */
    orderBy?: PlacePhotoOrderByWithRelationInput | PlacePhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlacePhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlacePhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlacePhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlacePhotos
    **/
    _count?: true | PlacePhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlacePhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlacePhotoMaxAggregateInputType
  }

  export type GetPlacePhotoAggregateType<T extends PlacePhotoAggregateArgs> = {
        [P in keyof T & keyof AggregatePlacePhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlacePhoto[P]>
      : GetScalarType<T[P], AggregatePlacePhoto[P]>
  }




  export type PlacePhotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlacePhotoWhereInput
    orderBy?: PlacePhotoOrderByWithAggregationInput | PlacePhotoOrderByWithAggregationInput[]
    by: PlacePhotoScalarFieldEnum[] | PlacePhotoScalarFieldEnum
    having?: PlacePhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlacePhotoCountAggregateInputType | true
    _min?: PlacePhotoMinAggregateInputType
    _max?: PlacePhotoMaxAggregateInputType
  }

  export type PlacePhotoGroupByOutputType = {
    id: string
    url: string
    placeId: string
    _count: PlacePhotoCountAggregateOutputType | null
    _min: PlacePhotoMinAggregateOutputType | null
    _max: PlacePhotoMaxAggregateOutputType | null
  }

  type GetPlacePhotoGroupByPayload<T extends PlacePhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlacePhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlacePhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlacePhotoGroupByOutputType[P]>
            : GetScalarType<T[P], PlacePhotoGroupByOutputType[P]>
        }
      >
    >


  export type PlacePhotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    placeId?: boolean
    place?: boolean | PlaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["placePhoto"]>


  export type PlacePhotoSelectScalar = {
    id?: boolean
    url?: boolean
    placeId?: boolean
  }

  export type PlacePhotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    place?: boolean | PlaceDefaultArgs<ExtArgs>
  }

  export type $PlacePhotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlacePhoto"
    objects: {
      place: Prisma.$PlacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      placeId: string
    }, ExtArgs["result"]["placePhoto"]>
    composites: {}
  }

  type PlacePhotoGetPayload<S extends boolean | null | undefined | PlacePhotoDefaultArgs> = $Result.GetResult<Prisma.$PlacePhotoPayload, S>

  type PlacePhotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlacePhotoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlacePhotoCountAggregateInputType | true
    }

  export interface PlacePhotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlacePhoto'], meta: { name: 'PlacePhoto' } }
    /**
     * Find zero or one PlacePhoto that matches the filter.
     * @param {PlacePhotoFindUniqueArgs} args - Arguments to find a PlacePhoto
     * @example
     * // Get one PlacePhoto
     * const placePhoto = await prisma.placePhoto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlacePhotoFindUniqueArgs>(args: SelectSubset<T, PlacePhotoFindUniqueArgs<ExtArgs>>): Prisma__PlacePhotoClient<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlacePhoto that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlacePhotoFindUniqueOrThrowArgs} args - Arguments to find a PlacePhoto
     * @example
     * // Get one PlacePhoto
     * const placePhoto = await prisma.placePhoto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlacePhotoFindUniqueOrThrowArgs>(args: SelectSubset<T, PlacePhotoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlacePhotoClient<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlacePhoto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePhotoFindFirstArgs} args - Arguments to find a PlacePhoto
     * @example
     * // Get one PlacePhoto
     * const placePhoto = await prisma.placePhoto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlacePhotoFindFirstArgs>(args?: SelectSubset<T, PlacePhotoFindFirstArgs<ExtArgs>>): Prisma__PlacePhotoClient<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlacePhoto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePhotoFindFirstOrThrowArgs} args - Arguments to find a PlacePhoto
     * @example
     * // Get one PlacePhoto
     * const placePhoto = await prisma.placePhoto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlacePhotoFindFirstOrThrowArgs>(args?: SelectSubset<T, PlacePhotoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlacePhotoClient<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlacePhotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePhotoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlacePhotos
     * const placePhotos = await prisma.placePhoto.findMany()
     * 
     * // Get first 10 PlacePhotos
     * const placePhotos = await prisma.placePhoto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const placePhotoWithIdOnly = await prisma.placePhoto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlacePhotoFindManyArgs>(args?: SelectSubset<T, PlacePhotoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlacePhoto.
     * @param {PlacePhotoCreateArgs} args - Arguments to create a PlacePhoto.
     * @example
     * // Create one PlacePhoto
     * const PlacePhoto = await prisma.placePhoto.create({
     *   data: {
     *     // ... data to create a PlacePhoto
     *   }
     * })
     * 
     */
    create<T extends PlacePhotoCreateArgs>(args: SelectSubset<T, PlacePhotoCreateArgs<ExtArgs>>): Prisma__PlacePhotoClient<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlacePhotos.
     * @param {PlacePhotoCreateManyArgs} args - Arguments to create many PlacePhotos.
     * @example
     * // Create many PlacePhotos
     * const placePhoto = await prisma.placePhoto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlacePhotoCreateManyArgs>(args?: SelectSubset<T, PlacePhotoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlacePhoto.
     * @param {PlacePhotoDeleteArgs} args - Arguments to delete one PlacePhoto.
     * @example
     * // Delete one PlacePhoto
     * const PlacePhoto = await prisma.placePhoto.delete({
     *   where: {
     *     // ... filter to delete one PlacePhoto
     *   }
     * })
     * 
     */
    delete<T extends PlacePhotoDeleteArgs>(args: SelectSubset<T, PlacePhotoDeleteArgs<ExtArgs>>): Prisma__PlacePhotoClient<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlacePhoto.
     * @param {PlacePhotoUpdateArgs} args - Arguments to update one PlacePhoto.
     * @example
     * // Update one PlacePhoto
     * const placePhoto = await prisma.placePhoto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlacePhotoUpdateArgs>(args: SelectSubset<T, PlacePhotoUpdateArgs<ExtArgs>>): Prisma__PlacePhotoClient<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlacePhotos.
     * @param {PlacePhotoDeleteManyArgs} args - Arguments to filter PlacePhotos to delete.
     * @example
     * // Delete a few PlacePhotos
     * const { count } = await prisma.placePhoto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlacePhotoDeleteManyArgs>(args?: SelectSubset<T, PlacePhotoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlacePhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlacePhotos
     * const placePhoto = await prisma.placePhoto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlacePhotoUpdateManyArgs>(args: SelectSubset<T, PlacePhotoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlacePhoto.
     * @param {PlacePhotoUpsertArgs} args - Arguments to update or create a PlacePhoto.
     * @example
     * // Update or create a PlacePhoto
     * const placePhoto = await prisma.placePhoto.upsert({
     *   create: {
     *     // ... data to create a PlacePhoto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlacePhoto we want to update
     *   }
     * })
     */
    upsert<T extends PlacePhotoUpsertArgs>(args: SelectSubset<T, PlacePhotoUpsertArgs<ExtArgs>>): Prisma__PlacePhotoClient<$Result.GetResult<Prisma.$PlacePhotoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlacePhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePhotoCountArgs} args - Arguments to filter PlacePhotos to count.
     * @example
     * // Count the number of PlacePhotos
     * const count = await prisma.placePhoto.count({
     *   where: {
     *     // ... the filter for the PlacePhotos we want to count
     *   }
     * })
    **/
    count<T extends PlacePhotoCountArgs>(
      args?: Subset<T, PlacePhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlacePhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlacePhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlacePhotoAggregateArgs>(args: Subset<T, PlacePhotoAggregateArgs>): Prisma.PrismaPromise<GetPlacePhotoAggregateType<T>>

    /**
     * Group by PlacePhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlacePhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlacePhotoGroupByArgs['orderBy'] }
        : { orderBy?: PlacePhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlacePhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlacePhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlacePhoto model
   */
  readonly fields: PlacePhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlacePhoto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlacePhotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    place<T extends PlaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaceDefaultArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlacePhoto model
   */ 
  interface PlacePhotoFieldRefs {
    readonly id: FieldRef<"PlacePhoto", 'String'>
    readonly url: FieldRef<"PlacePhoto", 'String'>
    readonly placeId: FieldRef<"PlacePhoto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlacePhoto findUnique
   */
  export type PlacePhotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    /**
     * Filter, which PlacePhoto to fetch.
     */
    where: PlacePhotoWhereUniqueInput
  }

  /**
   * PlacePhoto findUniqueOrThrow
   */
  export type PlacePhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    /**
     * Filter, which PlacePhoto to fetch.
     */
    where: PlacePhotoWhereUniqueInput
  }

  /**
   * PlacePhoto findFirst
   */
  export type PlacePhotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    /**
     * Filter, which PlacePhoto to fetch.
     */
    where?: PlacePhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlacePhotos to fetch.
     */
    orderBy?: PlacePhotoOrderByWithRelationInput | PlacePhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlacePhotos.
     */
    cursor?: PlacePhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlacePhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlacePhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlacePhotos.
     */
    distinct?: PlacePhotoScalarFieldEnum | PlacePhotoScalarFieldEnum[]
  }

  /**
   * PlacePhoto findFirstOrThrow
   */
  export type PlacePhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    /**
     * Filter, which PlacePhoto to fetch.
     */
    where?: PlacePhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlacePhotos to fetch.
     */
    orderBy?: PlacePhotoOrderByWithRelationInput | PlacePhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlacePhotos.
     */
    cursor?: PlacePhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlacePhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlacePhotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlacePhotos.
     */
    distinct?: PlacePhotoScalarFieldEnum | PlacePhotoScalarFieldEnum[]
  }

  /**
   * PlacePhoto findMany
   */
  export type PlacePhotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    /**
     * Filter, which PlacePhotos to fetch.
     */
    where?: PlacePhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlacePhotos to fetch.
     */
    orderBy?: PlacePhotoOrderByWithRelationInput | PlacePhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlacePhotos.
     */
    cursor?: PlacePhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlacePhotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlacePhotos.
     */
    skip?: number
    distinct?: PlacePhotoScalarFieldEnum | PlacePhotoScalarFieldEnum[]
  }

  /**
   * PlacePhoto create
   */
  export type PlacePhotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a PlacePhoto.
     */
    data: XOR<PlacePhotoCreateInput, PlacePhotoUncheckedCreateInput>
  }

  /**
   * PlacePhoto createMany
   */
  export type PlacePhotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlacePhotos.
     */
    data: PlacePhotoCreateManyInput | PlacePhotoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlacePhoto update
   */
  export type PlacePhotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a PlacePhoto.
     */
    data: XOR<PlacePhotoUpdateInput, PlacePhotoUncheckedUpdateInput>
    /**
     * Choose, which PlacePhoto to update.
     */
    where: PlacePhotoWhereUniqueInput
  }

  /**
   * PlacePhoto updateMany
   */
  export type PlacePhotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlacePhotos.
     */
    data: XOR<PlacePhotoUpdateManyMutationInput, PlacePhotoUncheckedUpdateManyInput>
    /**
     * Filter which PlacePhotos to update
     */
    where?: PlacePhotoWhereInput
  }

  /**
   * PlacePhoto upsert
   */
  export type PlacePhotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the PlacePhoto to update in case it exists.
     */
    where: PlacePhotoWhereUniqueInput
    /**
     * In case the PlacePhoto found by the `where` argument doesn't exist, create a new PlacePhoto with this data.
     */
    create: XOR<PlacePhotoCreateInput, PlacePhotoUncheckedCreateInput>
    /**
     * In case the PlacePhoto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlacePhotoUpdateInput, PlacePhotoUncheckedUpdateInput>
  }

  /**
   * PlacePhoto delete
   */
  export type PlacePhotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
    /**
     * Filter which PlacePhoto to delete.
     */
    where: PlacePhotoWhereUniqueInput
  }

  /**
   * PlacePhoto deleteMany
   */
  export type PlacePhotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlacePhotos to delete
     */
    where?: PlacePhotoWhereInput
  }

  /**
   * PlacePhoto without action
   */
  export type PlacePhotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePhoto
     */
    select?: PlacePhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePhotoInclude<ExtArgs> | null
  }


  /**
   * Model PlacePerk
   */

  export type AggregatePlacePerk = {
    _count: PlacePerkCountAggregateOutputType | null
    _min: PlacePerkMinAggregateOutputType | null
    _max: PlacePerkMaxAggregateOutputType | null
  }

  export type PlacePerkMinAggregateOutputType = {
    id: string | null
    perk: string | null
    placeId: string | null
  }

  export type PlacePerkMaxAggregateOutputType = {
    id: string | null
    perk: string | null
    placeId: string | null
  }

  export type PlacePerkCountAggregateOutputType = {
    id: number
    perk: number
    placeId: number
    _all: number
  }


  export type PlacePerkMinAggregateInputType = {
    id?: true
    perk?: true
    placeId?: true
  }

  export type PlacePerkMaxAggregateInputType = {
    id?: true
    perk?: true
    placeId?: true
  }

  export type PlacePerkCountAggregateInputType = {
    id?: true
    perk?: true
    placeId?: true
    _all?: true
  }

  export type PlacePerkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlacePerk to aggregate.
     */
    where?: PlacePerkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlacePerks to fetch.
     */
    orderBy?: PlacePerkOrderByWithRelationInput | PlacePerkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlacePerkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlacePerks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlacePerks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlacePerks
    **/
    _count?: true | PlacePerkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlacePerkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlacePerkMaxAggregateInputType
  }

  export type GetPlacePerkAggregateType<T extends PlacePerkAggregateArgs> = {
        [P in keyof T & keyof AggregatePlacePerk]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlacePerk[P]>
      : GetScalarType<T[P], AggregatePlacePerk[P]>
  }




  export type PlacePerkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlacePerkWhereInput
    orderBy?: PlacePerkOrderByWithAggregationInput | PlacePerkOrderByWithAggregationInput[]
    by: PlacePerkScalarFieldEnum[] | PlacePerkScalarFieldEnum
    having?: PlacePerkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlacePerkCountAggregateInputType | true
    _min?: PlacePerkMinAggregateInputType
    _max?: PlacePerkMaxAggregateInputType
  }

  export type PlacePerkGroupByOutputType = {
    id: string
    perk: string
    placeId: string
    _count: PlacePerkCountAggregateOutputType | null
    _min: PlacePerkMinAggregateOutputType | null
    _max: PlacePerkMaxAggregateOutputType | null
  }

  type GetPlacePerkGroupByPayload<T extends PlacePerkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlacePerkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlacePerkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlacePerkGroupByOutputType[P]>
            : GetScalarType<T[P], PlacePerkGroupByOutputType[P]>
        }
      >
    >


  export type PlacePerkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    perk?: boolean
    placeId?: boolean
    place?: boolean | PlaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["placePerk"]>


  export type PlacePerkSelectScalar = {
    id?: boolean
    perk?: boolean
    placeId?: boolean
  }

  export type PlacePerkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    place?: boolean | PlaceDefaultArgs<ExtArgs>
  }

  export type $PlacePerkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlacePerk"
    objects: {
      place: Prisma.$PlacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      perk: string
      placeId: string
    }, ExtArgs["result"]["placePerk"]>
    composites: {}
  }

  type PlacePerkGetPayload<S extends boolean | null | undefined | PlacePerkDefaultArgs> = $Result.GetResult<Prisma.$PlacePerkPayload, S>

  type PlacePerkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlacePerkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlacePerkCountAggregateInputType | true
    }

  export interface PlacePerkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlacePerk'], meta: { name: 'PlacePerk' } }
    /**
     * Find zero or one PlacePerk that matches the filter.
     * @param {PlacePerkFindUniqueArgs} args - Arguments to find a PlacePerk
     * @example
     * // Get one PlacePerk
     * const placePerk = await prisma.placePerk.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlacePerkFindUniqueArgs>(args: SelectSubset<T, PlacePerkFindUniqueArgs<ExtArgs>>): Prisma__PlacePerkClient<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlacePerk that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlacePerkFindUniqueOrThrowArgs} args - Arguments to find a PlacePerk
     * @example
     * // Get one PlacePerk
     * const placePerk = await prisma.placePerk.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlacePerkFindUniqueOrThrowArgs>(args: SelectSubset<T, PlacePerkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlacePerkClient<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlacePerk that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePerkFindFirstArgs} args - Arguments to find a PlacePerk
     * @example
     * // Get one PlacePerk
     * const placePerk = await prisma.placePerk.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlacePerkFindFirstArgs>(args?: SelectSubset<T, PlacePerkFindFirstArgs<ExtArgs>>): Prisma__PlacePerkClient<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlacePerk that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePerkFindFirstOrThrowArgs} args - Arguments to find a PlacePerk
     * @example
     * // Get one PlacePerk
     * const placePerk = await prisma.placePerk.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlacePerkFindFirstOrThrowArgs>(args?: SelectSubset<T, PlacePerkFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlacePerkClient<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlacePerks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePerkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlacePerks
     * const placePerks = await prisma.placePerk.findMany()
     * 
     * // Get first 10 PlacePerks
     * const placePerks = await prisma.placePerk.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const placePerkWithIdOnly = await prisma.placePerk.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlacePerkFindManyArgs>(args?: SelectSubset<T, PlacePerkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlacePerk.
     * @param {PlacePerkCreateArgs} args - Arguments to create a PlacePerk.
     * @example
     * // Create one PlacePerk
     * const PlacePerk = await prisma.placePerk.create({
     *   data: {
     *     // ... data to create a PlacePerk
     *   }
     * })
     * 
     */
    create<T extends PlacePerkCreateArgs>(args: SelectSubset<T, PlacePerkCreateArgs<ExtArgs>>): Prisma__PlacePerkClient<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlacePerks.
     * @param {PlacePerkCreateManyArgs} args - Arguments to create many PlacePerks.
     * @example
     * // Create many PlacePerks
     * const placePerk = await prisma.placePerk.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlacePerkCreateManyArgs>(args?: SelectSubset<T, PlacePerkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlacePerk.
     * @param {PlacePerkDeleteArgs} args - Arguments to delete one PlacePerk.
     * @example
     * // Delete one PlacePerk
     * const PlacePerk = await prisma.placePerk.delete({
     *   where: {
     *     // ... filter to delete one PlacePerk
     *   }
     * })
     * 
     */
    delete<T extends PlacePerkDeleteArgs>(args: SelectSubset<T, PlacePerkDeleteArgs<ExtArgs>>): Prisma__PlacePerkClient<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlacePerk.
     * @param {PlacePerkUpdateArgs} args - Arguments to update one PlacePerk.
     * @example
     * // Update one PlacePerk
     * const placePerk = await prisma.placePerk.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlacePerkUpdateArgs>(args: SelectSubset<T, PlacePerkUpdateArgs<ExtArgs>>): Prisma__PlacePerkClient<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlacePerks.
     * @param {PlacePerkDeleteManyArgs} args - Arguments to filter PlacePerks to delete.
     * @example
     * // Delete a few PlacePerks
     * const { count } = await prisma.placePerk.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlacePerkDeleteManyArgs>(args?: SelectSubset<T, PlacePerkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlacePerks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePerkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlacePerks
     * const placePerk = await prisma.placePerk.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlacePerkUpdateManyArgs>(args: SelectSubset<T, PlacePerkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlacePerk.
     * @param {PlacePerkUpsertArgs} args - Arguments to update or create a PlacePerk.
     * @example
     * // Update or create a PlacePerk
     * const placePerk = await prisma.placePerk.upsert({
     *   create: {
     *     // ... data to create a PlacePerk
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlacePerk we want to update
     *   }
     * })
     */
    upsert<T extends PlacePerkUpsertArgs>(args: SelectSubset<T, PlacePerkUpsertArgs<ExtArgs>>): Prisma__PlacePerkClient<$Result.GetResult<Prisma.$PlacePerkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlacePerks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePerkCountArgs} args - Arguments to filter PlacePerks to count.
     * @example
     * // Count the number of PlacePerks
     * const count = await prisma.placePerk.count({
     *   where: {
     *     // ... the filter for the PlacePerks we want to count
     *   }
     * })
    **/
    count<T extends PlacePerkCountArgs>(
      args?: Subset<T, PlacePerkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlacePerkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlacePerk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePerkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlacePerkAggregateArgs>(args: Subset<T, PlacePerkAggregateArgs>): Prisma.PrismaPromise<GetPlacePerkAggregateType<T>>

    /**
     * Group by PlacePerk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacePerkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlacePerkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlacePerkGroupByArgs['orderBy'] }
        : { orderBy?: PlacePerkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlacePerkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlacePerkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlacePerk model
   */
  readonly fields: PlacePerkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlacePerk.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlacePerkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    place<T extends PlaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaceDefaultArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlacePerk model
   */ 
  interface PlacePerkFieldRefs {
    readonly id: FieldRef<"PlacePerk", 'String'>
    readonly perk: FieldRef<"PlacePerk", 'String'>
    readonly placeId: FieldRef<"PlacePerk", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlacePerk findUnique
   */
  export type PlacePerkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    /**
     * Filter, which PlacePerk to fetch.
     */
    where: PlacePerkWhereUniqueInput
  }

  /**
   * PlacePerk findUniqueOrThrow
   */
  export type PlacePerkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    /**
     * Filter, which PlacePerk to fetch.
     */
    where: PlacePerkWhereUniqueInput
  }

  /**
   * PlacePerk findFirst
   */
  export type PlacePerkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    /**
     * Filter, which PlacePerk to fetch.
     */
    where?: PlacePerkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlacePerks to fetch.
     */
    orderBy?: PlacePerkOrderByWithRelationInput | PlacePerkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlacePerks.
     */
    cursor?: PlacePerkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlacePerks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlacePerks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlacePerks.
     */
    distinct?: PlacePerkScalarFieldEnum | PlacePerkScalarFieldEnum[]
  }

  /**
   * PlacePerk findFirstOrThrow
   */
  export type PlacePerkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    /**
     * Filter, which PlacePerk to fetch.
     */
    where?: PlacePerkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlacePerks to fetch.
     */
    orderBy?: PlacePerkOrderByWithRelationInput | PlacePerkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlacePerks.
     */
    cursor?: PlacePerkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlacePerks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlacePerks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlacePerks.
     */
    distinct?: PlacePerkScalarFieldEnum | PlacePerkScalarFieldEnum[]
  }

  /**
   * PlacePerk findMany
   */
  export type PlacePerkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    /**
     * Filter, which PlacePerks to fetch.
     */
    where?: PlacePerkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlacePerks to fetch.
     */
    orderBy?: PlacePerkOrderByWithRelationInput | PlacePerkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlacePerks.
     */
    cursor?: PlacePerkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlacePerks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlacePerks.
     */
    skip?: number
    distinct?: PlacePerkScalarFieldEnum | PlacePerkScalarFieldEnum[]
  }

  /**
   * PlacePerk create
   */
  export type PlacePerkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    /**
     * The data needed to create a PlacePerk.
     */
    data: XOR<PlacePerkCreateInput, PlacePerkUncheckedCreateInput>
  }

  /**
   * PlacePerk createMany
   */
  export type PlacePerkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlacePerks.
     */
    data: PlacePerkCreateManyInput | PlacePerkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlacePerk update
   */
  export type PlacePerkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    /**
     * The data needed to update a PlacePerk.
     */
    data: XOR<PlacePerkUpdateInput, PlacePerkUncheckedUpdateInput>
    /**
     * Choose, which PlacePerk to update.
     */
    where: PlacePerkWhereUniqueInput
  }

  /**
   * PlacePerk updateMany
   */
  export type PlacePerkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlacePerks.
     */
    data: XOR<PlacePerkUpdateManyMutationInput, PlacePerkUncheckedUpdateManyInput>
    /**
     * Filter which PlacePerks to update
     */
    where?: PlacePerkWhereInput
  }

  /**
   * PlacePerk upsert
   */
  export type PlacePerkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    /**
     * The filter to search for the PlacePerk to update in case it exists.
     */
    where: PlacePerkWhereUniqueInput
    /**
     * In case the PlacePerk found by the `where` argument doesn't exist, create a new PlacePerk with this data.
     */
    create: XOR<PlacePerkCreateInput, PlacePerkUncheckedCreateInput>
    /**
     * In case the PlacePerk was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlacePerkUpdateInput, PlacePerkUncheckedUpdateInput>
  }

  /**
   * PlacePerk delete
   */
  export type PlacePerkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
    /**
     * Filter which PlacePerk to delete.
     */
    where: PlacePerkWhereUniqueInput
  }

  /**
   * PlacePerk deleteMany
   */
  export type PlacePerkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlacePerks to delete
     */
    where?: PlacePerkWhereInput
  }

  /**
   * PlacePerk without action
   */
  export type PlacePerkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlacePerk
     */
    select?: PlacePerkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacePerkInclude<ExtArgs> | null
  }


  /**
   * Model Booking
   */

  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    numberOfGuests: number | null
    price: number | null
  }

  export type BookingSumAggregateOutputType = {
    numberOfGuests: number | null
    price: number | null
  }

  export type BookingMinAggregateOutputType = {
    id: string | null
    placeId: string | null
    renterId: string | null
    checkIn: Date | null
    checkOut: Date | null
    numberOfGuests: number | null
    name: string | null
    phone: string | null
    price: number | null
  }

  export type BookingMaxAggregateOutputType = {
    id: string | null
    placeId: string | null
    renterId: string | null
    checkIn: Date | null
    checkOut: Date | null
    numberOfGuests: number | null
    name: string | null
    phone: string | null
    price: number | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    placeId: number
    renterId: number
    checkIn: number
    checkOut: number
    numberOfGuests: number
    name: number
    phone: number
    price: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    numberOfGuests?: true
    price?: true
  }

  export type BookingSumAggregateInputType = {
    numberOfGuests?: true
    price?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    placeId?: true
    renterId?: true
    checkIn?: true
    checkOut?: true
    numberOfGuests?: true
    name?: true
    phone?: true
    price?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    placeId?: true
    renterId?: true
    checkIn?: true
    checkOut?: true
    numberOfGuests?: true
    name?: true
    phone?: true
    price?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    placeId?: true
    renterId?: true
    checkIn?: true
    checkOut?: true
    numberOfGuests?: true
    name?: true
    phone?: true
    price?: true
    _all?: true
  }

  export type BookingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Booking to aggregate.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithAggregationInput | BookingOrderByWithAggregationInput[]
    by: BookingScalarFieldEnum[] | BookingScalarFieldEnum
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }

  export type BookingGroupByOutputType = {
    id: string
    placeId: string
    renterId: string
    checkIn: Date
    checkOut: Date
    numberOfGuests: number
    name: string
    phone: string
    price: number
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeId?: boolean
    renterId?: boolean
    checkIn?: boolean
    checkOut?: boolean
    numberOfGuests?: boolean
    name?: boolean
    phone?: boolean
    price?: boolean
    place?: boolean | PlaceDefaultArgs<ExtArgs>
    renter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>


  export type BookingSelectScalar = {
    id?: boolean
    placeId?: boolean
    renterId?: boolean
    checkIn?: boolean
    checkOut?: boolean
    numberOfGuests?: boolean
    name?: boolean
    phone?: boolean
    price?: boolean
  }

  export type BookingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    place?: boolean | PlaceDefaultArgs<ExtArgs>
    renter?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BookingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Booking"
    objects: {
      place: Prisma.$PlacePayload<ExtArgs>
      renter: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      placeId: string
      renterId: string
      checkIn: Date
      checkOut: Date
      numberOfGuests: number
      name: string
      phone: string
      price: number
    }, ExtArgs["result"]["booking"]>
    composites: {}
  }

  type BookingGetPayload<S extends boolean | null | undefined | BookingDefaultArgs> = $Result.GetResult<Prisma.$BookingPayload, S>

  type BookingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookingCountAggregateInputType | true
    }

  export interface BookingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Booking'], meta: { name: 'Booking' } }
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingFindUniqueArgs>(args: SelectSubset<T, BookingFindUniqueArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Booking that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingFindFirstArgs>(args?: SelectSubset<T, BookingFindFirstArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Booking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingFindManyArgs>(args?: SelectSubset<T, BookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
     */
    create<T extends BookingCreateArgs>(args: SelectSubset<T, BookingCreateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Bookings.
     * @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingCreateManyArgs>(args?: SelectSubset<T, BookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
     */
    delete<T extends BookingDeleteArgs>(args: SelectSubset<T, BookingDeleteArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingUpdateArgs>(args: SelectSubset<T, BookingUpdateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingDeleteManyArgs>(args?: SelectSubset<T, BookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingUpdateManyArgs>(args: SelectSubset<T, BookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
     */
    upsert<T extends BookingUpsertArgs>(args: SelectSubset<T, BookingUpsertArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Booking model
   */
  readonly fields: BookingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    place<T extends PlaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaceDefaultArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    renter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Booking model
   */ 
  interface BookingFieldRefs {
    readonly id: FieldRef<"Booking", 'String'>
    readonly placeId: FieldRef<"Booking", 'String'>
    readonly renterId: FieldRef<"Booking", 'String'>
    readonly checkIn: FieldRef<"Booking", 'DateTime'>
    readonly checkOut: FieldRef<"Booking", 'DateTime'>
    readonly numberOfGuests: FieldRef<"Booking", 'Int'>
    readonly name: FieldRef<"Booking", 'String'>
    readonly phone: FieldRef<"Booking", 'String'>
    readonly price: FieldRef<"Booking", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Booking findUnique
   */
  export type BookingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findFirst
   */
  export type BookingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findMany
   */
  export type BookingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Bookings to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking create
   */
  export type BookingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to create a Booking.
     */
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }

  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Booking update
   */
  export type BookingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to update a Booking.
     */
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
  }

  /**
   * Booking upsert
   */
  export type BookingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The filter to search for the Booking to update in case it exists.
     */
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     */
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }

  /**
   * Booking delete
   */
  export type BookingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter which Booking to delete.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookings to delete
     */
    where?: BookingWhereInput
  }

  /**
   * Booking without action
   */
  export type BookingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PlaceScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    title: 'title',
    address: 'address',
    description: 'description',
    extraInfo: 'extraInfo',
    checkIn: 'checkIn',
    checkOut: 'checkOut',
    maxGuests: 'maxGuests',
    price: 'price'
  };

  export type PlaceScalarFieldEnum = (typeof PlaceScalarFieldEnum)[keyof typeof PlaceScalarFieldEnum]


  export const PlacePhotoScalarFieldEnum: {
    id: 'id',
    url: 'url',
    placeId: 'placeId'
  };

  export type PlacePhotoScalarFieldEnum = (typeof PlacePhotoScalarFieldEnum)[keyof typeof PlacePhotoScalarFieldEnum]


  export const PlacePerkScalarFieldEnum: {
    id: 'id',
    perk: 'perk',
    placeId: 'placeId'
  };

  export type PlacePerkScalarFieldEnum = (typeof PlacePerkScalarFieldEnum)[keyof typeof PlacePerkScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    placeId: 'placeId',
    renterId: 'renterId',
    checkIn: 'checkIn',
    checkOut: 'checkOut',
    numberOfGuests: 'numberOfGuests',
    name: 'name',
    phone: 'phone',
    price: 'price'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
    places?: PlaceListRelationFilter
    bookings?: BookingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    places?: PlaceOrderByRelationAggregateInput
    bookings?: BookingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createAt?: DateTimeFilter<"User"> | Date | string
    updateAt?: DateTimeFilter<"User"> | Date | string
    places?: PlaceListRelationFilter
    bookings?: BookingListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PlaceWhereInput = {
    AND?: PlaceWhereInput | PlaceWhereInput[]
    OR?: PlaceWhereInput[]
    NOT?: PlaceWhereInput | PlaceWhereInput[]
    id?: StringFilter<"Place"> | string
    ownerId?: StringFilter<"Place"> | string
    title?: StringFilter<"Place"> | string
    address?: StringFilter<"Place"> | string
    description?: StringFilter<"Place"> | string
    extraInfo?: StringFilter<"Place"> | string
    checkIn?: StringFilter<"Place"> | string
    checkOut?: StringFilter<"Place"> | string
    maxGuests?: IntFilter<"Place"> | number
    price?: IntFilter<"Place"> | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    photos?: PlacePhotoListRelationFilter
    perks?: PlacePerkListRelationFilter
    bookings?: BookingListRelationFilter
  }

  export type PlaceOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    address?: SortOrder
    description?: SortOrder
    extraInfo?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    maxGuests?: SortOrder
    price?: SortOrder
    owner?: UserOrderByWithRelationInput
    photos?: PlacePhotoOrderByRelationAggregateInput
    perks?: PlacePerkOrderByRelationAggregateInput
    bookings?: BookingOrderByRelationAggregateInput
  }

  export type PlaceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlaceWhereInput | PlaceWhereInput[]
    OR?: PlaceWhereInput[]
    NOT?: PlaceWhereInput | PlaceWhereInput[]
    ownerId?: StringFilter<"Place"> | string
    title?: StringFilter<"Place"> | string
    address?: StringFilter<"Place"> | string
    description?: StringFilter<"Place"> | string
    extraInfo?: StringFilter<"Place"> | string
    checkIn?: StringFilter<"Place"> | string
    checkOut?: StringFilter<"Place"> | string
    maxGuests?: IntFilter<"Place"> | number
    price?: IntFilter<"Place"> | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    photos?: PlacePhotoListRelationFilter
    perks?: PlacePerkListRelationFilter
    bookings?: BookingListRelationFilter
  }, "id">

  export type PlaceOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    address?: SortOrder
    description?: SortOrder
    extraInfo?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    maxGuests?: SortOrder
    price?: SortOrder
    _count?: PlaceCountOrderByAggregateInput
    _avg?: PlaceAvgOrderByAggregateInput
    _max?: PlaceMaxOrderByAggregateInput
    _min?: PlaceMinOrderByAggregateInput
    _sum?: PlaceSumOrderByAggregateInput
  }

  export type PlaceScalarWhereWithAggregatesInput = {
    AND?: PlaceScalarWhereWithAggregatesInput | PlaceScalarWhereWithAggregatesInput[]
    OR?: PlaceScalarWhereWithAggregatesInput[]
    NOT?: PlaceScalarWhereWithAggregatesInput | PlaceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Place"> | string
    ownerId?: StringWithAggregatesFilter<"Place"> | string
    title?: StringWithAggregatesFilter<"Place"> | string
    address?: StringWithAggregatesFilter<"Place"> | string
    description?: StringWithAggregatesFilter<"Place"> | string
    extraInfo?: StringWithAggregatesFilter<"Place"> | string
    checkIn?: StringWithAggregatesFilter<"Place"> | string
    checkOut?: StringWithAggregatesFilter<"Place"> | string
    maxGuests?: IntWithAggregatesFilter<"Place"> | number
    price?: IntWithAggregatesFilter<"Place"> | number
  }

  export type PlacePhotoWhereInput = {
    AND?: PlacePhotoWhereInput | PlacePhotoWhereInput[]
    OR?: PlacePhotoWhereInput[]
    NOT?: PlacePhotoWhereInput | PlacePhotoWhereInput[]
    id?: StringFilter<"PlacePhoto"> | string
    url?: StringFilter<"PlacePhoto"> | string
    placeId?: StringFilter<"PlacePhoto"> | string
    place?: XOR<PlaceRelationFilter, PlaceWhereInput>
  }

  export type PlacePhotoOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    placeId?: SortOrder
    place?: PlaceOrderByWithRelationInput
  }

  export type PlacePhotoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlacePhotoWhereInput | PlacePhotoWhereInput[]
    OR?: PlacePhotoWhereInput[]
    NOT?: PlacePhotoWhereInput | PlacePhotoWhereInput[]
    url?: StringFilter<"PlacePhoto"> | string
    placeId?: StringFilter<"PlacePhoto"> | string
    place?: XOR<PlaceRelationFilter, PlaceWhereInput>
  }, "id">

  export type PlacePhotoOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    placeId?: SortOrder
    _count?: PlacePhotoCountOrderByAggregateInput
    _max?: PlacePhotoMaxOrderByAggregateInput
    _min?: PlacePhotoMinOrderByAggregateInput
  }

  export type PlacePhotoScalarWhereWithAggregatesInput = {
    AND?: PlacePhotoScalarWhereWithAggregatesInput | PlacePhotoScalarWhereWithAggregatesInput[]
    OR?: PlacePhotoScalarWhereWithAggregatesInput[]
    NOT?: PlacePhotoScalarWhereWithAggregatesInput | PlacePhotoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlacePhoto"> | string
    url?: StringWithAggregatesFilter<"PlacePhoto"> | string
    placeId?: StringWithAggregatesFilter<"PlacePhoto"> | string
  }

  export type PlacePerkWhereInput = {
    AND?: PlacePerkWhereInput | PlacePerkWhereInput[]
    OR?: PlacePerkWhereInput[]
    NOT?: PlacePerkWhereInput | PlacePerkWhereInput[]
    id?: StringFilter<"PlacePerk"> | string
    perk?: StringFilter<"PlacePerk"> | string
    placeId?: StringFilter<"PlacePerk"> | string
    place?: XOR<PlaceRelationFilter, PlaceWhereInput>
  }

  export type PlacePerkOrderByWithRelationInput = {
    id?: SortOrder
    perk?: SortOrder
    placeId?: SortOrder
    place?: PlaceOrderByWithRelationInput
  }

  export type PlacePerkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlacePerkWhereInput | PlacePerkWhereInput[]
    OR?: PlacePerkWhereInput[]
    NOT?: PlacePerkWhereInput | PlacePerkWhereInput[]
    perk?: StringFilter<"PlacePerk"> | string
    placeId?: StringFilter<"PlacePerk"> | string
    place?: XOR<PlaceRelationFilter, PlaceWhereInput>
  }, "id">

  export type PlacePerkOrderByWithAggregationInput = {
    id?: SortOrder
    perk?: SortOrder
    placeId?: SortOrder
    _count?: PlacePerkCountOrderByAggregateInput
    _max?: PlacePerkMaxOrderByAggregateInput
    _min?: PlacePerkMinOrderByAggregateInput
  }

  export type PlacePerkScalarWhereWithAggregatesInput = {
    AND?: PlacePerkScalarWhereWithAggregatesInput | PlacePerkScalarWhereWithAggregatesInput[]
    OR?: PlacePerkScalarWhereWithAggregatesInput[]
    NOT?: PlacePerkScalarWhereWithAggregatesInput | PlacePerkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlacePerk"> | string
    perk?: StringWithAggregatesFilter<"PlacePerk"> | string
    placeId?: StringWithAggregatesFilter<"PlacePerk"> | string
  }

  export type BookingWhereInput = {
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    id?: StringFilter<"Booking"> | string
    placeId?: StringFilter<"Booking"> | string
    renterId?: StringFilter<"Booking"> | string
    checkIn?: DateTimeFilter<"Booking"> | Date | string
    checkOut?: DateTimeFilter<"Booking"> | Date | string
    numberOfGuests?: IntFilter<"Booking"> | number
    name?: StringFilter<"Booking"> | string
    phone?: StringFilter<"Booking"> | string
    price?: IntFilter<"Booking"> | number
    place?: XOR<PlaceRelationFilter, PlaceWhereInput>
    renter?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BookingOrderByWithRelationInput = {
    id?: SortOrder
    placeId?: SortOrder
    renterId?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    numberOfGuests?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    price?: SortOrder
    place?: PlaceOrderByWithRelationInput
    renter?: UserOrderByWithRelationInput
  }

  export type BookingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    placeId?: StringFilter<"Booking"> | string
    renterId?: StringFilter<"Booking"> | string
    checkIn?: DateTimeFilter<"Booking"> | Date | string
    checkOut?: DateTimeFilter<"Booking"> | Date | string
    numberOfGuests?: IntFilter<"Booking"> | number
    name?: StringFilter<"Booking"> | string
    phone?: StringFilter<"Booking"> | string
    price?: IntFilter<"Booking"> | number
    place?: XOR<PlaceRelationFilter, PlaceWhereInput>
    renter?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type BookingOrderByWithAggregationInput = {
    id?: SortOrder
    placeId?: SortOrder
    renterId?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    numberOfGuests?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    price?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    OR?: BookingScalarWhereWithAggregatesInput[]
    NOT?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Booking"> | string
    placeId?: StringWithAggregatesFilter<"Booking"> | string
    renterId?: StringWithAggregatesFilter<"Booking"> | string
    checkIn?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    checkOut?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    numberOfGuests?: IntWithAggregatesFilter<"Booking"> | number
    name?: StringWithAggregatesFilter<"Booking"> | string
    phone?: StringWithAggregatesFilter<"Booking"> | string
    price?: IntWithAggregatesFilter<"Booking"> | number
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
    places?: PlaceCreateNestedManyWithoutOwnerInput
    bookings?: BookingCreateNestedManyWithoutRenterInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
    places?: PlaceUncheckedCreateNestedManyWithoutOwnerInput
    bookings?: BookingUncheckedCreateNestedManyWithoutRenterInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    places?: PlaceUpdateManyWithoutOwnerNestedInput
    bookings?: BookingUpdateManyWithoutRenterNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    places?: PlaceUncheckedUpdateManyWithoutOwnerNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutRenterNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaceCreateInput = {
    id?: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    owner: UserCreateNestedOneWithoutPlacesInput
    photos?: PlacePhotoCreateNestedManyWithoutPlaceInput
    perks?: PlacePerkCreateNestedManyWithoutPlaceInput
    bookings?: BookingCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUncheckedCreateInput = {
    id?: string
    ownerId: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    photos?: PlacePhotoUncheckedCreateNestedManyWithoutPlaceInput
    perks?: PlacePerkUncheckedCreateNestedManyWithoutPlaceInput
    bookings?: BookingUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    owner?: UserUpdateOneRequiredWithoutPlacesNestedInput
    photos?: PlacePhotoUpdateManyWithoutPlaceNestedInput
    perks?: PlacePerkUpdateManyWithoutPlaceNestedInput
    bookings?: BookingUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    photos?: PlacePhotoUncheckedUpdateManyWithoutPlaceNestedInput
    perks?: PlacePerkUncheckedUpdateManyWithoutPlaceNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceCreateManyInput = {
    id?: string
    ownerId: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
  }

  export type PlaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type PlaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type PlacePhotoCreateInput = {
    id?: string
    url: string
    place: PlaceCreateNestedOneWithoutPhotosInput
  }

  export type PlacePhotoUncheckedCreateInput = {
    id?: string
    url: string
    placeId: string
  }

  export type PlacePhotoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    place?: PlaceUpdateOneRequiredWithoutPhotosNestedInput
  }

  export type PlacePhotoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePhotoCreateManyInput = {
    id?: string
    url: string
    placeId: string
  }

  export type PlacePhotoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePhotoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePerkCreateInput = {
    id?: string
    perk: string
    place: PlaceCreateNestedOneWithoutPerksInput
  }

  export type PlacePerkUncheckedCreateInput = {
    id?: string
    perk: string
    placeId: string
  }

  export type PlacePerkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    perk?: StringFieldUpdateOperationsInput | string
    place?: PlaceUpdateOneRequiredWithoutPerksNestedInput
  }

  export type PlacePerkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    perk?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePerkCreateManyInput = {
    id?: string
    perk: string
    placeId: string
  }

  export type PlacePerkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    perk?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePerkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    perk?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
  }

  export type BookingCreateInput = {
    id?: string
    checkIn: Date | string
    checkOut: Date | string
    numberOfGuests: number
    name: string
    phone: string
    price: number
    place: PlaceCreateNestedOneWithoutBookingsInput
    renter: UserCreateNestedOneWithoutBookingsInput
  }

  export type BookingUncheckedCreateInput = {
    id?: string
    placeId: string
    renterId: string
    checkIn: Date | string
    checkOut: Date | string
    numberOfGuests: number
    name: string
    phone: string
    price: number
  }

  export type BookingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    place?: PlaceUpdateOneRequiredWithoutBookingsNestedInput
    renter?: UserUpdateOneRequiredWithoutBookingsNestedInput
  }

  export type BookingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    renterId?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type BookingCreateManyInput = {
    id?: string
    placeId: string
    renterId: string
    checkIn: Date | string
    checkOut: Date | string
    numberOfGuests: number
    name: string
    phone: string
    price: number
  }

  export type BookingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type BookingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    renterId?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PlaceListRelationFilter = {
    every?: PlaceWhereInput
    some?: PlaceWhereInput
    none?: PlaceWhereInput
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type PlaceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PlacePhotoListRelationFilter = {
    every?: PlacePhotoWhereInput
    some?: PlacePhotoWhereInput
    none?: PlacePhotoWhereInput
  }

  export type PlacePerkListRelationFilter = {
    every?: PlacePerkWhereInput
    some?: PlacePerkWhereInput
    none?: PlacePerkWhereInput
  }

  export type PlacePhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlacePerkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaceCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    address?: SortOrder
    description?: SortOrder
    extraInfo?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    maxGuests?: SortOrder
    price?: SortOrder
  }

  export type PlaceAvgOrderByAggregateInput = {
    maxGuests?: SortOrder
    price?: SortOrder
  }

  export type PlaceMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    address?: SortOrder
    description?: SortOrder
    extraInfo?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    maxGuests?: SortOrder
    price?: SortOrder
  }

  export type PlaceMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    title?: SortOrder
    address?: SortOrder
    description?: SortOrder
    extraInfo?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    maxGuests?: SortOrder
    price?: SortOrder
  }

  export type PlaceSumOrderByAggregateInput = {
    maxGuests?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type PlaceRelationFilter = {
    is?: PlaceWhereInput
    isNot?: PlaceWhereInput
  }

  export type PlacePhotoCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    placeId?: SortOrder
  }

  export type PlacePhotoMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    placeId?: SortOrder
  }

  export type PlacePhotoMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    placeId?: SortOrder
  }

  export type PlacePerkCountOrderByAggregateInput = {
    id?: SortOrder
    perk?: SortOrder
    placeId?: SortOrder
  }

  export type PlacePerkMaxOrderByAggregateInput = {
    id?: SortOrder
    perk?: SortOrder
    placeId?: SortOrder
  }

  export type PlacePerkMinOrderByAggregateInput = {
    id?: SortOrder
    perk?: SortOrder
    placeId?: SortOrder
  }

  export type BookingCountOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    renterId?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    numberOfGuests?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    price?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    numberOfGuests?: SortOrder
    price?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    renterId?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    numberOfGuests?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    price?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id?: SortOrder
    placeId?: SortOrder
    renterId?: SortOrder
    checkIn?: SortOrder
    checkOut?: SortOrder
    numberOfGuests?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    price?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    numberOfGuests?: SortOrder
    price?: SortOrder
  }

  export type PlaceCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PlaceCreateWithoutOwnerInput, PlaceUncheckedCreateWithoutOwnerInput> | PlaceCreateWithoutOwnerInput[] | PlaceUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PlaceCreateOrConnectWithoutOwnerInput | PlaceCreateOrConnectWithoutOwnerInput[]
    createMany?: PlaceCreateManyOwnerInputEnvelope
    connect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
  }

  export type BookingCreateNestedManyWithoutRenterInput = {
    create?: XOR<BookingCreateWithoutRenterInput, BookingUncheckedCreateWithoutRenterInput> | BookingCreateWithoutRenterInput[] | BookingUncheckedCreateWithoutRenterInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutRenterInput | BookingCreateOrConnectWithoutRenterInput[]
    createMany?: BookingCreateManyRenterInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type PlaceUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PlaceCreateWithoutOwnerInput, PlaceUncheckedCreateWithoutOwnerInput> | PlaceCreateWithoutOwnerInput[] | PlaceUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PlaceCreateOrConnectWithoutOwnerInput | PlaceCreateOrConnectWithoutOwnerInput[]
    createMany?: PlaceCreateManyOwnerInputEnvelope
    connect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutRenterInput = {
    create?: XOR<BookingCreateWithoutRenterInput, BookingUncheckedCreateWithoutRenterInput> | BookingCreateWithoutRenterInput[] | BookingUncheckedCreateWithoutRenterInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutRenterInput | BookingCreateOrConnectWithoutRenterInput[]
    createMany?: BookingCreateManyRenterInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PlaceUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PlaceCreateWithoutOwnerInput, PlaceUncheckedCreateWithoutOwnerInput> | PlaceCreateWithoutOwnerInput[] | PlaceUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PlaceCreateOrConnectWithoutOwnerInput | PlaceCreateOrConnectWithoutOwnerInput[]
    upsert?: PlaceUpsertWithWhereUniqueWithoutOwnerInput | PlaceUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PlaceCreateManyOwnerInputEnvelope
    set?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    disconnect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    delete?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    connect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    update?: PlaceUpdateWithWhereUniqueWithoutOwnerInput | PlaceUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PlaceUpdateManyWithWhereWithoutOwnerInput | PlaceUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PlaceScalarWhereInput | PlaceScalarWhereInput[]
  }

  export type BookingUpdateManyWithoutRenterNestedInput = {
    create?: XOR<BookingCreateWithoutRenterInput, BookingUncheckedCreateWithoutRenterInput> | BookingCreateWithoutRenterInput[] | BookingUncheckedCreateWithoutRenterInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutRenterInput | BookingCreateOrConnectWithoutRenterInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutRenterInput | BookingUpsertWithWhereUniqueWithoutRenterInput[]
    createMany?: BookingCreateManyRenterInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutRenterInput | BookingUpdateWithWhereUniqueWithoutRenterInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutRenterInput | BookingUpdateManyWithWhereWithoutRenterInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type PlaceUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PlaceCreateWithoutOwnerInput, PlaceUncheckedCreateWithoutOwnerInput> | PlaceCreateWithoutOwnerInput[] | PlaceUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PlaceCreateOrConnectWithoutOwnerInput | PlaceCreateOrConnectWithoutOwnerInput[]
    upsert?: PlaceUpsertWithWhereUniqueWithoutOwnerInput | PlaceUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PlaceCreateManyOwnerInputEnvelope
    set?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    disconnect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    delete?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    connect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    update?: PlaceUpdateWithWhereUniqueWithoutOwnerInput | PlaceUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PlaceUpdateManyWithWhereWithoutOwnerInput | PlaceUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PlaceScalarWhereInput | PlaceScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutRenterNestedInput = {
    create?: XOR<BookingCreateWithoutRenterInput, BookingUncheckedCreateWithoutRenterInput> | BookingCreateWithoutRenterInput[] | BookingUncheckedCreateWithoutRenterInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutRenterInput | BookingCreateOrConnectWithoutRenterInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutRenterInput | BookingUpsertWithWhereUniqueWithoutRenterInput[]
    createMany?: BookingCreateManyRenterInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutRenterInput | BookingUpdateWithWhereUniqueWithoutRenterInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutRenterInput | BookingUpdateManyWithWhereWithoutRenterInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPlacesInput = {
    create?: XOR<UserCreateWithoutPlacesInput, UserUncheckedCreateWithoutPlacesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlacesInput
    connect?: UserWhereUniqueInput
  }

  export type PlacePhotoCreateNestedManyWithoutPlaceInput = {
    create?: XOR<PlacePhotoCreateWithoutPlaceInput, PlacePhotoUncheckedCreateWithoutPlaceInput> | PlacePhotoCreateWithoutPlaceInput[] | PlacePhotoUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: PlacePhotoCreateOrConnectWithoutPlaceInput | PlacePhotoCreateOrConnectWithoutPlaceInput[]
    createMany?: PlacePhotoCreateManyPlaceInputEnvelope
    connect?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
  }

  export type PlacePerkCreateNestedManyWithoutPlaceInput = {
    create?: XOR<PlacePerkCreateWithoutPlaceInput, PlacePerkUncheckedCreateWithoutPlaceInput> | PlacePerkCreateWithoutPlaceInput[] | PlacePerkUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: PlacePerkCreateOrConnectWithoutPlaceInput | PlacePerkCreateOrConnectWithoutPlaceInput[]
    createMany?: PlacePerkCreateManyPlaceInputEnvelope
    connect?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
  }

  export type BookingCreateNestedManyWithoutPlaceInput = {
    create?: XOR<BookingCreateWithoutPlaceInput, BookingUncheckedCreateWithoutPlaceInput> | BookingCreateWithoutPlaceInput[] | BookingUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutPlaceInput | BookingCreateOrConnectWithoutPlaceInput[]
    createMany?: BookingCreateManyPlaceInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type PlacePhotoUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<PlacePhotoCreateWithoutPlaceInput, PlacePhotoUncheckedCreateWithoutPlaceInput> | PlacePhotoCreateWithoutPlaceInput[] | PlacePhotoUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: PlacePhotoCreateOrConnectWithoutPlaceInput | PlacePhotoCreateOrConnectWithoutPlaceInput[]
    createMany?: PlacePhotoCreateManyPlaceInputEnvelope
    connect?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
  }

  export type PlacePerkUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<PlacePerkCreateWithoutPlaceInput, PlacePerkUncheckedCreateWithoutPlaceInput> | PlacePerkCreateWithoutPlaceInput[] | PlacePerkUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: PlacePerkCreateOrConnectWithoutPlaceInput | PlacePerkCreateOrConnectWithoutPlaceInput[]
    createMany?: PlacePerkCreateManyPlaceInputEnvelope
    connect?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<BookingCreateWithoutPlaceInput, BookingUncheckedCreateWithoutPlaceInput> | BookingCreateWithoutPlaceInput[] | BookingUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutPlaceInput | BookingCreateOrConnectWithoutPlaceInput[]
    createMany?: BookingCreateManyPlaceInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutPlacesNestedInput = {
    create?: XOR<UserCreateWithoutPlacesInput, UserUncheckedCreateWithoutPlacesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlacesInput
    upsert?: UserUpsertWithoutPlacesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlacesInput, UserUpdateWithoutPlacesInput>, UserUncheckedUpdateWithoutPlacesInput>
  }

  export type PlacePhotoUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<PlacePhotoCreateWithoutPlaceInput, PlacePhotoUncheckedCreateWithoutPlaceInput> | PlacePhotoCreateWithoutPlaceInput[] | PlacePhotoUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: PlacePhotoCreateOrConnectWithoutPlaceInput | PlacePhotoCreateOrConnectWithoutPlaceInput[]
    upsert?: PlacePhotoUpsertWithWhereUniqueWithoutPlaceInput | PlacePhotoUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: PlacePhotoCreateManyPlaceInputEnvelope
    set?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
    disconnect?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
    delete?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
    connect?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
    update?: PlacePhotoUpdateWithWhereUniqueWithoutPlaceInput | PlacePhotoUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: PlacePhotoUpdateManyWithWhereWithoutPlaceInput | PlacePhotoUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: PlacePhotoScalarWhereInput | PlacePhotoScalarWhereInput[]
  }

  export type PlacePerkUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<PlacePerkCreateWithoutPlaceInput, PlacePerkUncheckedCreateWithoutPlaceInput> | PlacePerkCreateWithoutPlaceInput[] | PlacePerkUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: PlacePerkCreateOrConnectWithoutPlaceInput | PlacePerkCreateOrConnectWithoutPlaceInput[]
    upsert?: PlacePerkUpsertWithWhereUniqueWithoutPlaceInput | PlacePerkUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: PlacePerkCreateManyPlaceInputEnvelope
    set?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
    disconnect?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
    delete?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
    connect?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
    update?: PlacePerkUpdateWithWhereUniqueWithoutPlaceInput | PlacePerkUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: PlacePerkUpdateManyWithWhereWithoutPlaceInput | PlacePerkUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: PlacePerkScalarWhereInput | PlacePerkScalarWhereInput[]
  }

  export type BookingUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<BookingCreateWithoutPlaceInput, BookingUncheckedCreateWithoutPlaceInput> | BookingCreateWithoutPlaceInput[] | BookingUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutPlaceInput | BookingCreateOrConnectWithoutPlaceInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutPlaceInput | BookingUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: BookingCreateManyPlaceInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutPlaceInput | BookingUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutPlaceInput | BookingUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type PlacePhotoUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<PlacePhotoCreateWithoutPlaceInput, PlacePhotoUncheckedCreateWithoutPlaceInput> | PlacePhotoCreateWithoutPlaceInput[] | PlacePhotoUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: PlacePhotoCreateOrConnectWithoutPlaceInput | PlacePhotoCreateOrConnectWithoutPlaceInput[]
    upsert?: PlacePhotoUpsertWithWhereUniqueWithoutPlaceInput | PlacePhotoUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: PlacePhotoCreateManyPlaceInputEnvelope
    set?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
    disconnect?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
    delete?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
    connect?: PlacePhotoWhereUniqueInput | PlacePhotoWhereUniqueInput[]
    update?: PlacePhotoUpdateWithWhereUniqueWithoutPlaceInput | PlacePhotoUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: PlacePhotoUpdateManyWithWhereWithoutPlaceInput | PlacePhotoUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: PlacePhotoScalarWhereInput | PlacePhotoScalarWhereInput[]
  }

  export type PlacePerkUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<PlacePerkCreateWithoutPlaceInput, PlacePerkUncheckedCreateWithoutPlaceInput> | PlacePerkCreateWithoutPlaceInput[] | PlacePerkUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: PlacePerkCreateOrConnectWithoutPlaceInput | PlacePerkCreateOrConnectWithoutPlaceInput[]
    upsert?: PlacePerkUpsertWithWhereUniqueWithoutPlaceInput | PlacePerkUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: PlacePerkCreateManyPlaceInputEnvelope
    set?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
    disconnect?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
    delete?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
    connect?: PlacePerkWhereUniqueInput | PlacePerkWhereUniqueInput[]
    update?: PlacePerkUpdateWithWhereUniqueWithoutPlaceInput | PlacePerkUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: PlacePerkUpdateManyWithWhereWithoutPlaceInput | PlacePerkUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: PlacePerkScalarWhereInput | PlacePerkScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<BookingCreateWithoutPlaceInput, BookingUncheckedCreateWithoutPlaceInput> | BookingCreateWithoutPlaceInput[] | BookingUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutPlaceInput | BookingCreateOrConnectWithoutPlaceInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutPlaceInput | BookingUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: BookingCreateManyPlaceInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutPlaceInput | BookingUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutPlaceInput | BookingUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type PlaceCreateNestedOneWithoutPhotosInput = {
    create?: XOR<PlaceCreateWithoutPhotosInput, PlaceUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: PlaceCreateOrConnectWithoutPhotosInput
    connect?: PlaceWhereUniqueInput
  }

  export type PlaceUpdateOneRequiredWithoutPhotosNestedInput = {
    create?: XOR<PlaceCreateWithoutPhotosInput, PlaceUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: PlaceCreateOrConnectWithoutPhotosInput
    upsert?: PlaceUpsertWithoutPhotosInput
    connect?: PlaceWhereUniqueInput
    update?: XOR<XOR<PlaceUpdateToOneWithWhereWithoutPhotosInput, PlaceUpdateWithoutPhotosInput>, PlaceUncheckedUpdateWithoutPhotosInput>
  }

  export type PlaceCreateNestedOneWithoutPerksInput = {
    create?: XOR<PlaceCreateWithoutPerksInput, PlaceUncheckedCreateWithoutPerksInput>
    connectOrCreate?: PlaceCreateOrConnectWithoutPerksInput
    connect?: PlaceWhereUniqueInput
  }

  export type PlaceUpdateOneRequiredWithoutPerksNestedInput = {
    create?: XOR<PlaceCreateWithoutPerksInput, PlaceUncheckedCreateWithoutPerksInput>
    connectOrCreate?: PlaceCreateOrConnectWithoutPerksInput
    upsert?: PlaceUpsertWithoutPerksInput
    connect?: PlaceWhereUniqueInput
    update?: XOR<XOR<PlaceUpdateToOneWithWhereWithoutPerksInput, PlaceUpdateWithoutPerksInput>, PlaceUncheckedUpdateWithoutPerksInput>
  }

  export type PlaceCreateNestedOneWithoutBookingsInput = {
    create?: XOR<PlaceCreateWithoutBookingsInput, PlaceUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: PlaceCreateOrConnectWithoutBookingsInput
    connect?: PlaceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBookingsInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    connect?: UserWhereUniqueInput
  }

  export type PlaceUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<PlaceCreateWithoutBookingsInput, PlaceUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: PlaceCreateOrConnectWithoutBookingsInput
    upsert?: PlaceUpsertWithoutBookingsInput
    connect?: PlaceWhereUniqueInput
    update?: XOR<XOR<PlaceUpdateToOneWithWhereWithoutBookingsInput, PlaceUpdateWithoutBookingsInput>, PlaceUncheckedUpdateWithoutBookingsInput>
  }

  export type UserUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    upsert?: UserUpsertWithoutBookingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookingsInput, UserUpdateWithoutBookingsInput>, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PlaceCreateWithoutOwnerInput = {
    id?: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    photos?: PlacePhotoCreateNestedManyWithoutPlaceInput
    perks?: PlacePerkCreateNestedManyWithoutPlaceInput
    bookings?: BookingCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUncheckedCreateWithoutOwnerInput = {
    id?: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    photos?: PlacePhotoUncheckedCreateNestedManyWithoutPlaceInput
    perks?: PlacePerkUncheckedCreateNestedManyWithoutPlaceInput
    bookings?: BookingUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceCreateOrConnectWithoutOwnerInput = {
    where: PlaceWhereUniqueInput
    create: XOR<PlaceCreateWithoutOwnerInput, PlaceUncheckedCreateWithoutOwnerInput>
  }

  export type PlaceCreateManyOwnerInputEnvelope = {
    data: PlaceCreateManyOwnerInput | PlaceCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type BookingCreateWithoutRenterInput = {
    id?: string
    checkIn: Date | string
    checkOut: Date | string
    numberOfGuests: number
    name: string
    phone: string
    price: number
    place: PlaceCreateNestedOneWithoutBookingsInput
  }

  export type BookingUncheckedCreateWithoutRenterInput = {
    id?: string
    placeId: string
    checkIn: Date | string
    checkOut: Date | string
    numberOfGuests: number
    name: string
    phone: string
    price: number
  }

  export type BookingCreateOrConnectWithoutRenterInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutRenterInput, BookingUncheckedCreateWithoutRenterInput>
  }

  export type BookingCreateManyRenterInputEnvelope = {
    data: BookingCreateManyRenterInput | BookingCreateManyRenterInput[]
    skipDuplicates?: boolean
  }

  export type PlaceUpsertWithWhereUniqueWithoutOwnerInput = {
    where: PlaceWhereUniqueInput
    update: XOR<PlaceUpdateWithoutOwnerInput, PlaceUncheckedUpdateWithoutOwnerInput>
    create: XOR<PlaceCreateWithoutOwnerInput, PlaceUncheckedCreateWithoutOwnerInput>
  }

  export type PlaceUpdateWithWhereUniqueWithoutOwnerInput = {
    where: PlaceWhereUniqueInput
    data: XOR<PlaceUpdateWithoutOwnerInput, PlaceUncheckedUpdateWithoutOwnerInput>
  }

  export type PlaceUpdateManyWithWhereWithoutOwnerInput = {
    where: PlaceScalarWhereInput
    data: XOR<PlaceUpdateManyMutationInput, PlaceUncheckedUpdateManyWithoutOwnerInput>
  }

  export type PlaceScalarWhereInput = {
    AND?: PlaceScalarWhereInput | PlaceScalarWhereInput[]
    OR?: PlaceScalarWhereInput[]
    NOT?: PlaceScalarWhereInput | PlaceScalarWhereInput[]
    id?: StringFilter<"Place"> | string
    ownerId?: StringFilter<"Place"> | string
    title?: StringFilter<"Place"> | string
    address?: StringFilter<"Place"> | string
    description?: StringFilter<"Place"> | string
    extraInfo?: StringFilter<"Place"> | string
    checkIn?: StringFilter<"Place"> | string
    checkOut?: StringFilter<"Place"> | string
    maxGuests?: IntFilter<"Place"> | number
    price?: IntFilter<"Place"> | number
  }

  export type BookingUpsertWithWhereUniqueWithoutRenterInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutRenterInput, BookingUncheckedUpdateWithoutRenterInput>
    create: XOR<BookingCreateWithoutRenterInput, BookingUncheckedCreateWithoutRenterInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutRenterInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutRenterInput, BookingUncheckedUpdateWithoutRenterInput>
  }

  export type BookingUpdateManyWithWhereWithoutRenterInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutRenterInput>
  }

  export type BookingScalarWhereInput = {
    AND?: BookingScalarWhereInput | BookingScalarWhereInput[]
    OR?: BookingScalarWhereInput[]
    NOT?: BookingScalarWhereInput | BookingScalarWhereInput[]
    id?: StringFilter<"Booking"> | string
    placeId?: StringFilter<"Booking"> | string
    renterId?: StringFilter<"Booking"> | string
    checkIn?: DateTimeFilter<"Booking"> | Date | string
    checkOut?: DateTimeFilter<"Booking"> | Date | string
    numberOfGuests?: IntFilter<"Booking"> | number
    name?: StringFilter<"Booking"> | string
    phone?: StringFilter<"Booking"> | string
    price?: IntFilter<"Booking"> | number
  }

  export type UserCreateWithoutPlacesInput = {
    id?: string
    name: string
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutRenterInput
  }

  export type UserUncheckedCreateWithoutPlacesInput = {
    id?: string
    name: string
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutRenterInput
  }

  export type UserCreateOrConnectWithoutPlacesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlacesInput, UserUncheckedCreateWithoutPlacesInput>
  }

  export type PlacePhotoCreateWithoutPlaceInput = {
    id?: string
    url: string
  }

  export type PlacePhotoUncheckedCreateWithoutPlaceInput = {
    id?: string
    url: string
  }

  export type PlacePhotoCreateOrConnectWithoutPlaceInput = {
    where: PlacePhotoWhereUniqueInput
    create: XOR<PlacePhotoCreateWithoutPlaceInput, PlacePhotoUncheckedCreateWithoutPlaceInput>
  }

  export type PlacePhotoCreateManyPlaceInputEnvelope = {
    data: PlacePhotoCreateManyPlaceInput | PlacePhotoCreateManyPlaceInput[]
    skipDuplicates?: boolean
  }

  export type PlacePerkCreateWithoutPlaceInput = {
    id?: string
    perk: string
  }

  export type PlacePerkUncheckedCreateWithoutPlaceInput = {
    id?: string
    perk: string
  }

  export type PlacePerkCreateOrConnectWithoutPlaceInput = {
    where: PlacePerkWhereUniqueInput
    create: XOR<PlacePerkCreateWithoutPlaceInput, PlacePerkUncheckedCreateWithoutPlaceInput>
  }

  export type PlacePerkCreateManyPlaceInputEnvelope = {
    data: PlacePerkCreateManyPlaceInput | PlacePerkCreateManyPlaceInput[]
    skipDuplicates?: boolean
  }

  export type BookingCreateWithoutPlaceInput = {
    id?: string
    checkIn: Date | string
    checkOut: Date | string
    numberOfGuests: number
    name: string
    phone: string
    price: number
    renter: UserCreateNestedOneWithoutBookingsInput
  }

  export type BookingUncheckedCreateWithoutPlaceInput = {
    id?: string
    renterId: string
    checkIn: Date | string
    checkOut: Date | string
    numberOfGuests: number
    name: string
    phone: string
    price: number
  }

  export type BookingCreateOrConnectWithoutPlaceInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutPlaceInput, BookingUncheckedCreateWithoutPlaceInput>
  }

  export type BookingCreateManyPlaceInputEnvelope = {
    data: BookingCreateManyPlaceInput | BookingCreateManyPlaceInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPlacesInput = {
    update: XOR<UserUpdateWithoutPlacesInput, UserUncheckedUpdateWithoutPlacesInput>
    create: XOR<UserCreateWithoutPlacesInput, UserUncheckedCreateWithoutPlacesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlacesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlacesInput, UserUncheckedUpdateWithoutPlacesInput>
  }

  export type UserUpdateWithoutPlacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutRenterNestedInput
  }

  export type UserUncheckedUpdateWithoutPlacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutRenterNestedInput
  }

  export type PlacePhotoUpsertWithWhereUniqueWithoutPlaceInput = {
    where: PlacePhotoWhereUniqueInput
    update: XOR<PlacePhotoUpdateWithoutPlaceInput, PlacePhotoUncheckedUpdateWithoutPlaceInput>
    create: XOR<PlacePhotoCreateWithoutPlaceInput, PlacePhotoUncheckedCreateWithoutPlaceInput>
  }

  export type PlacePhotoUpdateWithWhereUniqueWithoutPlaceInput = {
    where: PlacePhotoWhereUniqueInput
    data: XOR<PlacePhotoUpdateWithoutPlaceInput, PlacePhotoUncheckedUpdateWithoutPlaceInput>
  }

  export type PlacePhotoUpdateManyWithWhereWithoutPlaceInput = {
    where: PlacePhotoScalarWhereInput
    data: XOR<PlacePhotoUpdateManyMutationInput, PlacePhotoUncheckedUpdateManyWithoutPlaceInput>
  }

  export type PlacePhotoScalarWhereInput = {
    AND?: PlacePhotoScalarWhereInput | PlacePhotoScalarWhereInput[]
    OR?: PlacePhotoScalarWhereInput[]
    NOT?: PlacePhotoScalarWhereInput | PlacePhotoScalarWhereInput[]
    id?: StringFilter<"PlacePhoto"> | string
    url?: StringFilter<"PlacePhoto"> | string
    placeId?: StringFilter<"PlacePhoto"> | string
  }

  export type PlacePerkUpsertWithWhereUniqueWithoutPlaceInput = {
    where: PlacePerkWhereUniqueInput
    update: XOR<PlacePerkUpdateWithoutPlaceInput, PlacePerkUncheckedUpdateWithoutPlaceInput>
    create: XOR<PlacePerkCreateWithoutPlaceInput, PlacePerkUncheckedCreateWithoutPlaceInput>
  }

  export type PlacePerkUpdateWithWhereUniqueWithoutPlaceInput = {
    where: PlacePerkWhereUniqueInput
    data: XOR<PlacePerkUpdateWithoutPlaceInput, PlacePerkUncheckedUpdateWithoutPlaceInput>
  }

  export type PlacePerkUpdateManyWithWhereWithoutPlaceInput = {
    where: PlacePerkScalarWhereInput
    data: XOR<PlacePerkUpdateManyMutationInput, PlacePerkUncheckedUpdateManyWithoutPlaceInput>
  }

  export type PlacePerkScalarWhereInput = {
    AND?: PlacePerkScalarWhereInput | PlacePerkScalarWhereInput[]
    OR?: PlacePerkScalarWhereInput[]
    NOT?: PlacePerkScalarWhereInput | PlacePerkScalarWhereInput[]
    id?: StringFilter<"PlacePerk"> | string
    perk?: StringFilter<"PlacePerk"> | string
    placeId?: StringFilter<"PlacePerk"> | string
  }

  export type BookingUpsertWithWhereUniqueWithoutPlaceInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutPlaceInput, BookingUncheckedUpdateWithoutPlaceInput>
    create: XOR<BookingCreateWithoutPlaceInput, BookingUncheckedCreateWithoutPlaceInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutPlaceInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutPlaceInput, BookingUncheckedUpdateWithoutPlaceInput>
  }

  export type BookingUpdateManyWithWhereWithoutPlaceInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutPlaceInput>
  }

  export type PlaceCreateWithoutPhotosInput = {
    id?: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    owner: UserCreateNestedOneWithoutPlacesInput
    perks?: PlacePerkCreateNestedManyWithoutPlaceInput
    bookings?: BookingCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUncheckedCreateWithoutPhotosInput = {
    id?: string
    ownerId: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    perks?: PlacePerkUncheckedCreateNestedManyWithoutPlaceInput
    bookings?: BookingUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceCreateOrConnectWithoutPhotosInput = {
    where: PlaceWhereUniqueInput
    create: XOR<PlaceCreateWithoutPhotosInput, PlaceUncheckedCreateWithoutPhotosInput>
  }

  export type PlaceUpsertWithoutPhotosInput = {
    update: XOR<PlaceUpdateWithoutPhotosInput, PlaceUncheckedUpdateWithoutPhotosInput>
    create: XOR<PlaceCreateWithoutPhotosInput, PlaceUncheckedCreateWithoutPhotosInput>
    where?: PlaceWhereInput
  }

  export type PlaceUpdateToOneWithWhereWithoutPhotosInput = {
    where?: PlaceWhereInput
    data: XOR<PlaceUpdateWithoutPhotosInput, PlaceUncheckedUpdateWithoutPhotosInput>
  }

  export type PlaceUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    owner?: UserUpdateOneRequiredWithoutPlacesNestedInput
    perks?: PlacePerkUpdateManyWithoutPlaceNestedInput
    bookings?: BookingUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    perks?: PlacePerkUncheckedUpdateManyWithoutPlaceNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceCreateWithoutPerksInput = {
    id?: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    owner: UserCreateNestedOneWithoutPlacesInput
    photos?: PlacePhotoCreateNestedManyWithoutPlaceInput
    bookings?: BookingCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUncheckedCreateWithoutPerksInput = {
    id?: string
    ownerId: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    photos?: PlacePhotoUncheckedCreateNestedManyWithoutPlaceInput
    bookings?: BookingUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceCreateOrConnectWithoutPerksInput = {
    where: PlaceWhereUniqueInput
    create: XOR<PlaceCreateWithoutPerksInput, PlaceUncheckedCreateWithoutPerksInput>
  }

  export type PlaceUpsertWithoutPerksInput = {
    update: XOR<PlaceUpdateWithoutPerksInput, PlaceUncheckedUpdateWithoutPerksInput>
    create: XOR<PlaceCreateWithoutPerksInput, PlaceUncheckedCreateWithoutPerksInput>
    where?: PlaceWhereInput
  }

  export type PlaceUpdateToOneWithWhereWithoutPerksInput = {
    where?: PlaceWhereInput
    data: XOR<PlaceUpdateWithoutPerksInput, PlaceUncheckedUpdateWithoutPerksInput>
  }

  export type PlaceUpdateWithoutPerksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    owner?: UserUpdateOneRequiredWithoutPlacesNestedInput
    photos?: PlacePhotoUpdateManyWithoutPlaceNestedInput
    bookings?: BookingUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateWithoutPerksInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    photos?: PlacePhotoUncheckedUpdateManyWithoutPlaceNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceCreateWithoutBookingsInput = {
    id?: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    owner: UserCreateNestedOneWithoutPlacesInput
    photos?: PlacePhotoCreateNestedManyWithoutPlaceInput
    perks?: PlacePerkCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUncheckedCreateWithoutBookingsInput = {
    id?: string
    ownerId: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
    photos?: PlacePhotoUncheckedCreateNestedManyWithoutPlaceInput
    perks?: PlacePerkUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceCreateOrConnectWithoutBookingsInput = {
    where: PlaceWhereUniqueInput
    create: XOR<PlaceCreateWithoutBookingsInput, PlaceUncheckedCreateWithoutBookingsInput>
  }

  export type UserCreateWithoutBookingsInput = {
    id?: string
    name: string
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
    places?: PlaceCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutBookingsInput = {
    id?: string
    name: string
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
    places?: PlaceUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutBookingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
  }

  export type PlaceUpsertWithoutBookingsInput = {
    update: XOR<PlaceUpdateWithoutBookingsInput, PlaceUncheckedUpdateWithoutBookingsInput>
    create: XOR<PlaceCreateWithoutBookingsInput, PlaceUncheckedCreateWithoutBookingsInput>
    where?: PlaceWhereInput
  }

  export type PlaceUpdateToOneWithWhereWithoutBookingsInput = {
    where?: PlaceWhereInput
    data: XOR<PlaceUpdateWithoutBookingsInput, PlaceUncheckedUpdateWithoutBookingsInput>
  }

  export type PlaceUpdateWithoutBookingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    owner?: UserUpdateOneRequiredWithoutPlacesNestedInput
    photos?: PlacePhotoUpdateManyWithoutPlaceNestedInput
    perks?: PlacePerkUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateWithoutBookingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    photos?: PlacePhotoUncheckedUpdateManyWithoutPlaceNestedInput
    perks?: PlacePerkUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type UserUpsertWithoutBookingsInput = {
    update: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type UserUpdateWithoutBookingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    places?: PlaceUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutBookingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    places?: PlaceUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type PlaceCreateManyOwnerInput = {
    id?: string
    title: string
    address: string
    description: string
    extraInfo: string
    checkIn: string
    checkOut: string
    maxGuests: number
    price: number
  }

  export type BookingCreateManyRenterInput = {
    id?: string
    placeId: string
    checkIn: Date | string
    checkOut: Date | string
    numberOfGuests: number
    name: string
    phone: string
    price: number
  }

  export type PlaceUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    photos?: PlacePhotoUpdateManyWithoutPlaceNestedInput
    perks?: PlacePerkUpdateManyWithoutPlaceNestedInput
    bookings?: BookingUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    photos?: PlacePhotoUncheckedUpdateManyWithoutPlaceNestedInput
    perks?: PlacePerkUncheckedUpdateManyWithoutPlaceNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    extraInfo?: StringFieldUpdateOperationsInput | string
    checkIn?: StringFieldUpdateOperationsInput | string
    checkOut?: StringFieldUpdateOperationsInput | string
    maxGuests?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type BookingUpdateWithoutRenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    place?: PlaceUpdateOneRequiredWithoutBookingsNestedInput
  }

  export type BookingUncheckedUpdateWithoutRenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type BookingUncheckedUpdateManyWithoutRenterInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type PlacePhotoCreateManyPlaceInput = {
    id?: string
    url: string
  }

  export type PlacePerkCreateManyPlaceInput = {
    id?: string
    perk: string
  }

  export type BookingCreateManyPlaceInput = {
    id?: string
    renterId: string
    checkIn: Date | string
    checkOut: Date | string
    numberOfGuests: number
    name: string
    phone: string
    price: number
  }

  export type PlacePhotoUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePhotoUncheckedUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePhotoUncheckedUpdateManyWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePerkUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    perk?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePerkUncheckedUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    perk?: StringFieldUpdateOperationsInput | string
  }

  export type PlacePerkUncheckedUpdateManyWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    perk?: StringFieldUpdateOperationsInput | string
  }

  export type BookingUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    renter?: UserUpdateOneRequiredWithoutBookingsNestedInput
  }

  export type BookingUncheckedUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    renterId?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type BookingUncheckedUpdateManyWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    renterId?: StringFieldUpdateOperationsInput | string
    checkIn?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOut?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfGuests?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaceCountOutputTypeDefaultArgs instead
     */
    export type PlaceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaceDefaultArgs instead
     */
    export type PlaceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlacePhotoDefaultArgs instead
     */
    export type PlacePhotoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlacePhotoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlacePerkDefaultArgs instead
     */
    export type PlacePerkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlacePerkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookingDefaultArgs instead
     */
    export type BookingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookingDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}